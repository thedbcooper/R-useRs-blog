[
  {
    "objectID": "posts/topic-packages/index.html",
    "href": "posts/topic-packages/index.html",
    "title": "R Packages - 3/7/25",
    "section": "",
    "text": "Packages are collections of R functions, data, and compiled code in a well-defined format. The directory where packages are stored is called the library.\n\n\n\nBase R can refer to a collection of packages that are installed by default with R and live in the “system library.” They are “built-in.” These basic functions allow R to work. We can use the sessionInfo() function to find out which version of R we’re running and which packages are “attached.” When a package is “attached,” functions that belong to that package are available for use by the user. We can also see package versions next to their name.\n\nsessionInfo()\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nloaded via a namespace (and not attached):\n [1] compiler_4.4.1    fastmap_1.2.0     cli_3.6.3         htmltools_0.5.8.1\n [5] tools_4.4.1       rstudioapi_0.17.1 yaml_2.3.10       rmarkdown_2.29   \n [9] knitr_1.49        jsonlite_1.8.9    xfun_0.50         digest_0.6.37    \n[13] rlang_1.1.4       renv_1.0.11       evaluate_1.0.3   \n\n\n\n\n\n\n\n\nTip: Visual Cues\n\n\n\nI will use visual cues (and recommend you do as well) to distinguish between normal text, packages and function names, etc. When you see a function name, it will be followed by “()”. E.g. sessionInfo(). When you see a package name, it will be surrounded by curly brackets “{}”. E.g. The {tidyr} package.\n\n\n\n\nPackage development is community driven, and many packages have overlapping functionality. If you can think of a need, there’s probably a package for it. There are clear “winners” in terms of number of downloads and active users for a package. Entirely new “dialects” of R programming have been borne out of community package development. The “tidyverse”, one such dialect, is a collection of packages with consistent principles that unify the packages. You can read more here: “tidy tools manifesto.”\nChoice of package or function depend on what functionality is needed, what you value, and your aversion to risk. By risk, I mean the potential for functions to change or break when either your R version changes or the package version changes.\nYou will see me mostly using tidyverse packages because I value their human readability, consistent structure, and stability of included functions. “Stability” harkens to the “lifecycle” of a package or function. Perhaps you’re still concerned with sustainability and “dependency-bloat,” so you stick with base R. Maybe you need functions that perform better, so you use the {data.table} package, another R “dialect.” Maybe you just prefer to use whichever functions require the least amount of code. There are other reasons you will come across that lead you to choose when and where to use a specific function.\n\n\n\n\n\n\nHow can I tell if a package is popular or stable?\n\n\n\nDo some research! When was the last update? Check out the version history. Find the source code on GitHub; look at how many stars/follows it has. Look at the dates of forum and blog posts that use the function/package in question. Your knowledge of which packages are most popular will grow with experience.\n\n\n\n\n\nUse the install.packages() function to install new packages. This will attempt to download and install a package from a “package repository.” By default, R will use the “CRAN” repository (Comprehensive R Archive Network). There are other repos, like the public Posit Package Manager which have a wider range of package versions built for different versions of R. To manage packages, it’s easiest to use the RStudio GUI, but see ?update.packages() for programmatic options.\n\n# install.packages(\"tidyr\", repos = \"http://cran.us.r-project.org\")\n\ninstall.packages(\"tidyr\", repos = \"https://packagemanager.posit.co/cran/latest\")\n\nThe following package(s) will be installed:\n- tidyr [1.3.1]\nThese packages will be installed into \"~/Daniel/R/R-useRs-group/Blog/renv/library/windows/R-4.4/x86_64-w64-mingw32\".\n\n# Installing packages --------------------------------------------------------\n- Installing tidyr ...                          OK [linked from cache]\nSuccessfully installed 1 package in 11 milliseconds.\n\n# not run:\n# ?update.packages()\n\n\n\nSome packages have dependencies “under the hood.” In other words, some packages rely on the functions/source code of other packages to work. R is smart enough to install dependencies by default, which means there will be package names you may not recognize in your library.\n\n\n\n\n\n\nCaution\n\n\n\nWhen you update a package you like, R may not successfully install the correct version of a dependency if you already had the needed package installed. This leads to several troubleshooting steps of updating packages, and what I recommend to avoid updating unless you have a good reason to do so. At a later time, we will discuss {renv}, an R package/environment manager.\n\n\n\n\n\n\nPackages are attached using the library() or require() functions. You will most often see library(). R is smart enough to choose your default package library, so you will usually not see the library specified here. You can view your library file paths available to your R session using the .libPaths() function\n\n.libPaths()\n\n[1] \"C:/Users/daniel.cooper/Daniel/R/R-useRs-group/Blog/renv/library/windows/R-4.4/x86_64-w64-mingw32\"     \n[2] \"C:/Users/daniel.cooper/AppData/Local/R/cache/R/renv/sandbox/windows/R-4.4/x86_64-w64-mingw32/e0da0d43\"\n\n\n\nlibrary(tidyr)\n\nWarning: package 'tidyr' was built under R version 4.4.2\n\n\n\nsessionInfo()\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n[1] tidyr_1.3.1\n\nloaded via a namespace (and not attached):\n [1] digest_0.6.37     R6_2.5.1          fastmap_1.2.0     tidyselect_1.2.1 \n [5] xfun_0.50         magrittr_2.0.3    glue_1.8.0        tibble_3.2.1     \n [9] knitr_1.49        pkgconfig_2.0.3   htmltools_0.5.8.1 generics_0.1.3   \n[13] rmarkdown_2.29    dplyr_1.1.4       lifecycle_1.0.4   cli_3.6.3        \n[17] vctrs_0.6.5       renv_1.0.11       compiler_4.4.1    purrr_1.0.4      \n[21] rstudioapi_0.17.1 tools_4.4.1       pillar_1.10.1     evaluate_1.0.3   \n[25] yaml_2.3.10       rlang_1.1.4       jsonlite_1.8.9   \n\n\n\n\n\n\n\n\nImportant: Attach packages with intentionality.\n\n\n\nWhen you load a package using library(), you attach all functions and data associated with that package.\nOnly install and load a package if you know what functions you want to use. I recommend keeping a note specifying why you’re attaching an entire package and which functions are most used.\nGenerally, we want our programming projects to be sustainable and reproducible. Attaching too many packages leads to ambiguity in your code and may lead to unexpected behavior, so don’t do it!\n\n\nTo disambiguate your code, you can use functions from a particular package without attaching the full package. To do this, use the double colon operator ::\n\n# not run:\n# tidyr::pivot_longer()\n\nIn this example, I’m accessing the function called pivot_longer() from the {tidyr} package. Notably, this did not require attaching the {tidyr} package using library() BUT the package would still need to be installed first using install.packages(). While this is less clean (and longer!) than simply attaching the full package, I believe beginner R programmers greatly benefit from disambiguating their code using ::.\n\n\n\n\nDid you attach too many packages? Is a function not working like you expected? Did R give you a warning that a function is deprecated or has been superseded?\n\n\nThere exists NO rule that developers of packages must use different names or follow certain conventions or principles. This means that two separate packages may both attach a function when loaded that has the same name. Let’s see what happens when the entire tidyverse is attached:\n\nlibrary(tidyverse)\n\nWarning: package 'tidyverse' was built under R version 4.4.2\n\n\nWarning: package 'ggplot2' was built under R version 4.4.2\n\n\nWarning: package 'tibble' was built under R version 4.4.2\n\n\nWarning: package 'readr' was built under R version 4.4.2\n\n\nWarning: package 'dplyr' was built under R version 4.4.2\n\n\nWarning: package 'stringr' was built under R version 4.4.2\n\n\nWarning: package 'forcats' was built under R version 4.4.2\n\n\nWarning: package 'lubridate' was built under R version 4.4.2\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ purrr     1.0.4\n✔ forcats   1.0.0     ✔ readr     2.1.5\n✔ ggplot2   3.5.1     ✔ stringr   1.5.1\n✔ lubridate 1.9.4     ✔ tibble    3.2.1\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nNote that most packages aren’t so kind as to print out messages such as these.\nWe can see that the dplyr::filter() function masked the stats::filter() function. Same for lag().\n\n\n\n\n\n\nImportant\n\n\n\nThe order in which you attach a package determines which function will be used when you try to use it in your code. With each new package attached, all “old” functions with the same name will be “masked.” This is what disambiguating your code using :: helps with.\n\n\nThe {conflicted} package helps you catch masking and forces the user to decide which function to prioritize.\n\ndetach(\"package:tidyverse\", unload = TRUE)\n\nlibrary(conflicted)\n\nWarning: package 'conflicted' was built under R version 4.4.2\n\nlibrary(dplyr)\n\n# not run:\n# filter(starwars, species == \"Human\")\n\nIf the above filter() was run, it would result in an Error, and prevent me from rendering this document. The error would read:\nError:\n! [conflicted] filter found in 2 packages.\nEither pick the one you want with `::`:\n• dplyr::filter\n• stats::filter\nOr declare a preference with `conflicts_prefer()`:\n• conflicts_prefer(dplyr::filter)\n• conflicts_prefer(stats::filter)\nBacktrace:\n 1. conflicted (local) `&lt;fn&gt;`()\n\ndplyr::filter(starwars, species == \"Human\")\n\n# A tibble: 35 × 14\n   name     height  mass hair_color skin_color eye_color birth_year sex   gender\n   &lt;chr&gt;     &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; \n 1 Luke Sk…    172    77 blond      fair       blue            19   male  mascu…\n 2 Darth V…    202   136 none       white      yellow          41.9 male  mascu…\n 3 Leia Or…    150    49 brown      light      brown           19   fema… femin…\n 4 Owen La…    178   120 brown, gr… light      blue            52   male  mascu…\n 5 Beru Wh…    165    75 brown      light      blue            47   fema… femin…\n 6 Biggs D…    183    84 black      light      brown           24   male  mascu…\n 7 Obi-Wan…    182    77 auburn, w… fair       blue-gray       57   male  mascu…\n 8 Anakin …    188    84 blond      fair       blue            41.9 male  mascu…\n 9 Wilhuff…    180    NA auburn, g… fair       blue            64   male  mascu…\n10 Han Solo    180    80 brown      fair       brown           29   male  mascu…\n# ℹ 25 more rows\n# ℹ 5 more variables: homeworld &lt;chr&gt;, species &lt;chr&gt;, films &lt;list&gt;,\n#   vehicles &lt;list&gt;, starships &lt;list&gt;\n\n\n\nconflicts_prefer(dplyr::filter)\n\n[conflicted] Will prefer dplyr::filter over any other package.\n\n\n\nfilter(starwars, species == \"Human\")\n\n# A tibble: 35 × 14\n   name     height  mass hair_color skin_color eye_color birth_year sex   gender\n   &lt;chr&gt;     &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; \n 1 Luke Sk…    172    77 blond      fair       blue            19   male  mascu…\n 2 Darth V…    202   136 none       white      yellow          41.9 male  mascu…\n 3 Leia Or…    150    49 brown      light      brown           19   fema… femin…\n 4 Owen La…    178   120 brown, gr… light      blue            52   male  mascu…\n 5 Beru Wh…    165    75 brown      light      blue            47   fema… femin…\n 6 Biggs D…    183    84 black      light      brown           24   male  mascu…\n 7 Obi-Wan…    182    77 auburn, w… fair       blue-gray       57   male  mascu…\n 8 Anakin …    188    84 blond      fair       blue            41.9 male  mascu…\n 9 Wilhuff…    180    NA auburn, g… fair       blue            64   male  mascu…\n10 Han Solo    180    80 brown      fair       brown           29   male  mascu…\n# ℹ 25 more rows\n# ℹ 5 more variables: homeworld &lt;chr&gt;, species &lt;chr&gt;, films &lt;list&gt;,\n#   vehicles &lt;list&gt;, starships &lt;list&gt;\n\n\n\n\n\n\n\n\nBuilt in data sets\n\n\n\nNotice how I simply use the object called starwars? That’s an example of a built in data imported by {dplyr} for demonstration purposes. It contains information on Star Wars characters. It’s attached when {dplyr} is loaded.\n\n\n\n\n\nPackages change over time. Some very prominent packages, like tidyr, supersede old packages while retaining some of the older functions. E.g. gather() versus pivot_longer(). View the help pages!\n\n# not run:\n# ?tidyr::gather()\n# ?tidyr::pivot_longer()\n\nstarwars_select &lt;- starwars |&gt; \n  dplyr::select(name, hair_color, skin_color, eye_color)\n\nstarwars_select |&gt; \n  tidyr::gather(key = \"attribute\", value = \"value\", hair_color, skin_color, eye_color, na.rm = TRUE) |&gt; \n  dplyr::arrange(name)\n\n# A tibble: 256 × 3\n   name             attribute  value       \n   &lt;chr&gt;            &lt;chr&gt;      &lt;chr&gt;       \n 1 Ackbar           hair_color none        \n 2 Ackbar           skin_color brown mottle\n 3 Ackbar           eye_color  orange      \n 4 Adi Gallia       hair_color none        \n 5 Adi Gallia       skin_color dark        \n 6 Adi Gallia       eye_color  blue        \n 7 Anakin Skywalker hair_color blond       \n 8 Anakin Skywalker skin_color fair        \n 9 Anakin Skywalker eye_color  blue        \n10 Arvel Crynyd     hair_color brown       \n# ℹ 246 more rows\n\n\n\nstarwars_select |&gt; \n  tidyr::pivot_longer(cols = c(hair_color, skin_color, eye_color), names_to = \"attribute\", values_to = \"values\", values_drop_na = TRUE) |&gt; \n  dplyr::arrange(name)\n\n# A tibble: 256 × 3\n   name             attribute  values      \n   &lt;chr&gt;            &lt;chr&gt;      &lt;chr&gt;       \n 1 Ackbar           hair_color none        \n 2 Ackbar           skin_color brown mottle\n 3 Ackbar           eye_color  orange      \n 4 Adi Gallia       hair_color none        \n 5 Adi Gallia       skin_color dark        \n 6 Adi Gallia       eye_color  blue        \n 7 Anakin Skywalker hair_color blond       \n 8 Anakin Skywalker skin_color fair        \n 9 Anakin Skywalker eye_color  blue        \n10 Arvel Crynyd     hair_color brown       \n# ℹ 246 more rows\n\n\n\nlifecycle::pkg_lifecycle_statuses(\"tidyr\")\n\n   package                      fun    lifecycle\n9    tidyr                complete_   deprecated\n10   tidyr                 drop_na_   deprecated\n11   tidyr                  expand_   deprecated\n12   tidyr                crossing_   deprecated\n13   tidyr                 nesting_   deprecated\n14   tidyr                 extract_   deprecated\n15   tidyr                    fill_   deprecated\n16   tidyr                  gather_   deprecated\n17   tidyr                    nest_   deprecated\n18   tidyr           separate_rows_   deprecated\n19   tidyr                separate_   deprecated\n20   tidyr                  spread_   deprecated\n21   tidyr                   unite_   deprecated\n22   tidyr                  unnest_   deprecated\n28   tidyr                  extract   superseded\n33   tidyr                   gather   superseded\n37   tidyr              nest_legacy   superseded\n38   tidyr            unnest_legacy   superseded\n51   tidyr                 separate   superseded\n52   tidyr    separate_longer_delim experimental\n53   tidyr separate_longer_position experimental\n54   tidyr            separate_rows   superseded\n55   tidyr     separate_wider_delim experimental\n56   tidyr  separate_wider_position experimental\n57   tidyr     separate_wider_regex experimental\n59   tidyr                   spread   superseded\n\n\n\n\n\n\nSome books, like the Epidemiologist R Handbook, recommend that you use the {pacman} package to install and load packages. This package has some extra utility that may be helpful. Other packages include {pak}, which have functions for installing packages from GitHub or other sources. There are other ways to install packages but beyond the scope of this document. See: The Comprehensive Guide to Installing R Packages from CRAN, Bioconductor, GitHub and Co."
  },
  {
    "objectID": "posts/topic-packages/index.html#what-is-a-package",
    "href": "posts/topic-packages/index.html#what-is-a-package",
    "title": "R Packages - 3/7/25",
    "section": "",
    "text": "Packages are collections of R functions, data, and compiled code in a well-defined format. The directory where packages are stored is called the library."
  },
  {
    "objectID": "posts/topic-packages/index.html#what-is-base-r",
    "href": "posts/topic-packages/index.html#what-is-base-r",
    "title": "R Packages - 3/7/25",
    "section": "",
    "text": "Base R can refer to a collection of packages that are installed by default with R and live in the “system library.” They are “built-in.” These basic functions allow R to work. We can use the sessionInfo() function to find out which version of R we’re running and which packages are “attached.” When a package is “attached,” functions that belong to that package are available for use by the user. We can also see package versions next to their name.\n\nsessionInfo()\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nloaded via a namespace (and not attached):\n [1] compiler_4.4.1    fastmap_1.2.0     cli_3.6.3         htmltools_0.5.8.1\n [5] tools_4.4.1       rstudioapi_0.17.1 yaml_2.3.10       rmarkdown_2.29   \n [9] knitr_1.49        jsonlite_1.8.9    xfun_0.50         digest_0.6.37    \n[13] rlang_1.1.4       renv_1.0.11       evaluate_1.0.3   \n\n\n\n\n\n\n\n\nTip: Visual Cues\n\n\n\nI will use visual cues (and recommend you do as well) to distinguish between normal text, packages and function names, etc. When you see a function name, it will be followed by “()”. E.g. sessionInfo(). When you see a package name, it will be surrounded by curly brackets “{}”. E.g. The {tidyr} package.\n\n\n\n\nPackage development is community driven, and many packages have overlapping functionality. If you can think of a need, there’s probably a package for it. There are clear “winners” in terms of number of downloads and active users for a package. Entirely new “dialects” of R programming have been borne out of community package development. The “tidyverse”, one such dialect, is a collection of packages with consistent principles that unify the packages. You can read more here: “tidy tools manifesto.”\nChoice of package or function depend on what functionality is needed, what you value, and your aversion to risk. By risk, I mean the potential for functions to change or break when either your R version changes or the package version changes.\nYou will see me mostly using tidyverse packages because I value their human readability, consistent structure, and stability of included functions. “Stability” harkens to the “lifecycle” of a package or function. Perhaps you’re still concerned with sustainability and “dependency-bloat,” so you stick with base R. Maybe you need functions that perform better, so you use the {data.table} package, another R “dialect.” Maybe you just prefer to use whichever functions require the least amount of code. There are other reasons you will come across that lead you to choose when and where to use a specific function.\n\n\n\n\n\n\nHow can I tell if a package is popular or stable?\n\n\n\nDo some research! When was the last update? Check out the version history. Find the source code on GitHub; look at how many stars/follows it has. Look at the dates of forum and blog posts that use the function/package in question. Your knowledge of which packages are most popular will grow with experience.\n\n\n\n\n\nUse the install.packages() function to install new packages. This will attempt to download and install a package from a “package repository.” By default, R will use the “CRAN” repository (Comprehensive R Archive Network). There are other repos, like the public Posit Package Manager which have a wider range of package versions built for different versions of R. To manage packages, it’s easiest to use the RStudio GUI, but see ?update.packages() for programmatic options.\n\n# install.packages(\"tidyr\", repos = \"http://cran.us.r-project.org\")\n\ninstall.packages(\"tidyr\", repos = \"https://packagemanager.posit.co/cran/latest\")\n\nThe following package(s) will be installed:\n- tidyr [1.3.1]\nThese packages will be installed into \"~/Daniel/R/R-useRs-group/Blog/renv/library/windows/R-4.4/x86_64-w64-mingw32\".\n\n# Installing packages --------------------------------------------------------\n- Installing tidyr ...                          OK [linked from cache]\nSuccessfully installed 1 package in 11 milliseconds.\n\n# not run:\n# ?update.packages()\n\n\n\nSome packages have dependencies “under the hood.” In other words, some packages rely on the functions/source code of other packages to work. R is smart enough to install dependencies by default, which means there will be package names you may not recognize in your library.\n\n\n\n\n\n\nCaution\n\n\n\nWhen you update a package you like, R may not successfully install the correct version of a dependency if you already had the needed package installed. This leads to several troubleshooting steps of updating packages, and what I recommend to avoid updating unless you have a good reason to do so. At a later time, we will discuss {renv}, an R package/environment manager.\n\n\n\n\n\n\nPackages are attached using the library() or require() functions. You will most often see library(). R is smart enough to choose your default package library, so you will usually not see the library specified here. You can view your library file paths available to your R session using the .libPaths() function\n\n.libPaths()\n\n[1] \"C:/Users/daniel.cooper/Daniel/R/R-useRs-group/Blog/renv/library/windows/R-4.4/x86_64-w64-mingw32\"     \n[2] \"C:/Users/daniel.cooper/AppData/Local/R/cache/R/renv/sandbox/windows/R-4.4/x86_64-w64-mingw32/e0da0d43\"\n\n\n\nlibrary(tidyr)\n\nWarning: package 'tidyr' was built under R version 4.4.2\n\n\n\nsessionInfo()\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n[1] tidyr_1.3.1\n\nloaded via a namespace (and not attached):\n [1] digest_0.6.37     R6_2.5.1          fastmap_1.2.0     tidyselect_1.2.1 \n [5] xfun_0.50         magrittr_2.0.3    glue_1.8.0        tibble_3.2.1     \n [9] knitr_1.49        pkgconfig_2.0.3   htmltools_0.5.8.1 generics_0.1.3   \n[13] rmarkdown_2.29    dplyr_1.1.4       lifecycle_1.0.4   cli_3.6.3        \n[17] vctrs_0.6.5       renv_1.0.11       compiler_4.4.1    purrr_1.0.4      \n[21] rstudioapi_0.17.1 tools_4.4.1       pillar_1.10.1     evaluate_1.0.3   \n[25] yaml_2.3.10       rlang_1.1.4       jsonlite_1.8.9   \n\n\n\n\n\n\n\n\nImportant: Attach packages with intentionality.\n\n\n\nWhen you load a package using library(), you attach all functions and data associated with that package.\nOnly install and load a package if you know what functions you want to use. I recommend keeping a note specifying why you’re attaching an entire package and which functions are most used.\nGenerally, we want our programming projects to be sustainable and reproducible. Attaching too many packages leads to ambiguity in your code and may lead to unexpected behavior, so don’t do it!\n\n\nTo disambiguate your code, you can use functions from a particular package without attaching the full package. To do this, use the double colon operator ::\n\n# not run:\n# tidyr::pivot_longer()\n\nIn this example, I’m accessing the function called pivot_longer() from the {tidyr} package. Notably, this did not require attaching the {tidyr} package using library() BUT the package would still need to be installed first using install.packages(). While this is less clean (and longer!) than simply attaching the full package, I believe beginner R programmers greatly benefit from disambiguating their code using ::."
  },
  {
    "objectID": "posts/topic-packages/index.html#unexpected-behavior",
    "href": "posts/topic-packages/index.html#unexpected-behavior",
    "title": "R Packages - 3/7/25",
    "section": "",
    "text": "Did you attach too many packages? Is a function not working like you expected? Did R give you a warning that a function is deprecated or has been superseded?\n\n\nThere exists NO rule that developers of packages must use different names or follow certain conventions or principles. This means that two separate packages may both attach a function when loaded that has the same name. Let’s see what happens when the entire tidyverse is attached:\n\nlibrary(tidyverse)\n\nWarning: package 'tidyverse' was built under R version 4.4.2\n\n\nWarning: package 'ggplot2' was built under R version 4.4.2\n\n\nWarning: package 'tibble' was built under R version 4.4.2\n\n\nWarning: package 'readr' was built under R version 4.4.2\n\n\nWarning: package 'dplyr' was built under R version 4.4.2\n\n\nWarning: package 'stringr' was built under R version 4.4.2\n\n\nWarning: package 'forcats' was built under R version 4.4.2\n\n\nWarning: package 'lubridate' was built under R version 4.4.2\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ purrr     1.0.4\n✔ forcats   1.0.0     ✔ readr     2.1.5\n✔ ggplot2   3.5.1     ✔ stringr   1.5.1\n✔ lubridate 1.9.4     ✔ tibble    3.2.1\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nNote that most packages aren’t so kind as to print out messages such as these.\nWe can see that the dplyr::filter() function masked the stats::filter() function. Same for lag().\n\n\n\n\n\n\nImportant\n\n\n\nThe order in which you attach a package determines which function will be used when you try to use it in your code. With each new package attached, all “old” functions with the same name will be “masked.” This is what disambiguating your code using :: helps with.\n\n\nThe {conflicted} package helps you catch masking and forces the user to decide which function to prioritize.\n\ndetach(\"package:tidyverse\", unload = TRUE)\n\nlibrary(conflicted)\n\nWarning: package 'conflicted' was built under R version 4.4.2\n\nlibrary(dplyr)\n\n# not run:\n# filter(starwars, species == \"Human\")\n\nIf the above filter() was run, it would result in an Error, and prevent me from rendering this document. The error would read:\nError:\n! [conflicted] filter found in 2 packages.\nEither pick the one you want with `::`:\n• dplyr::filter\n• stats::filter\nOr declare a preference with `conflicts_prefer()`:\n• conflicts_prefer(dplyr::filter)\n• conflicts_prefer(stats::filter)\nBacktrace:\n 1. conflicted (local) `&lt;fn&gt;`()\n\ndplyr::filter(starwars, species == \"Human\")\n\n# A tibble: 35 × 14\n   name     height  mass hair_color skin_color eye_color birth_year sex   gender\n   &lt;chr&gt;     &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; \n 1 Luke Sk…    172    77 blond      fair       blue            19   male  mascu…\n 2 Darth V…    202   136 none       white      yellow          41.9 male  mascu…\n 3 Leia Or…    150    49 brown      light      brown           19   fema… femin…\n 4 Owen La…    178   120 brown, gr… light      blue            52   male  mascu…\n 5 Beru Wh…    165    75 brown      light      blue            47   fema… femin…\n 6 Biggs D…    183    84 black      light      brown           24   male  mascu…\n 7 Obi-Wan…    182    77 auburn, w… fair       blue-gray       57   male  mascu…\n 8 Anakin …    188    84 blond      fair       blue            41.9 male  mascu…\n 9 Wilhuff…    180    NA auburn, g… fair       blue            64   male  mascu…\n10 Han Solo    180    80 brown      fair       brown           29   male  mascu…\n# ℹ 25 more rows\n# ℹ 5 more variables: homeworld &lt;chr&gt;, species &lt;chr&gt;, films &lt;list&gt;,\n#   vehicles &lt;list&gt;, starships &lt;list&gt;\n\n\n\nconflicts_prefer(dplyr::filter)\n\n[conflicted] Will prefer dplyr::filter over any other package.\n\n\n\nfilter(starwars, species == \"Human\")\n\n# A tibble: 35 × 14\n   name     height  mass hair_color skin_color eye_color birth_year sex   gender\n   &lt;chr&gt;     &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; \n 1 Luke Sk…    172    77 blond      fair       blue            19   male  mascu…\n 2 Darth V…    202   136 none       white      yellow          41.9 male  mascu…\n 3 Leia Or…    150    49 brown      light      brown           19   fema… femin…\n 4 Owen La…    178   120 brown, gr… light      blue            52   male  mascu…\n 5 Beru Wh…    165    75 brown      light      blue            47   fema… femin…\n 6 Biggs D…    183    84 black      light      brown           24   male  mascu…\n 7 Obi-Wan…    182    77 auburn, w… fair       blue-gray       57   male  mascu…\n 8 Anakin …    188    84 blond      fair       blue            41.9 male  mascu…\n 9 Wilhuff…    180    NA auburn, g… fair       blue            64   male  mascu…\n10 Han Solo    180    80 brown      fair       brown           29   male  mascu…\n# ℹ 25 more rows\n# ℹ 5 more variables: homeworld &lt;chr&gt;, species &lt;chr&gt;, films &lt;list&gt;,\n#   vehicles &lt;list&gt;, starships &lt;list&gt;\n\n\n\n\n\n\n\n\nBuilt in data sets\n\n\n\nNotice how I simply use the object called starwars? That’s an example of a built in data imported by {dplyr} for demonstration purposes. It contains information on Star Wars characters. It’s attached when {dplyr} is loaded.\n\n\n\n\n\nPackages change over time. Some very prominent packages, like tidyr, supersede old packages while retaining some of the older functions. E.g. gather() versus pivot_longer(). View the help pages!\n\n# not run:\n# ?tidyr::gather()\n# ?tidyr::pivot_longer()\n\nstarwars_select &lt;- starwars |&gt; \n  dplyr::select(name, hair_color, skin_color, eye_color)\n\nstarwars_select |&gt; \n  tidyr::gather(key = \"attribute\", value = \"value\", hair_color, skin_color, eye_color, na.rm = TRUE) |&gt; \n  dplyr::arrange(name)\n\n# A tibble: 256 × 3\n   name             attribute  value       \n   &lt;chr&gt;            &lt;chr&gt;      &lt;chr&gt;       \n 1 Ackbar           hair_color none        \n 2 Ackbar           skin_color brown mottle\n 3 Ackbar           eye_color  orange      \n 4 Adi Gallia       hair_color none        \n 5 Adi Gallia       skin_color dark        \n 6 Adi Gallia       eye_color  blue        \n 7 Anakin Skywalker hair_color blond       \n 8 Anakin Skywalker skin_color fair        \n 9 Anakin Skywalker eye_color  blue        \n10 Arvel Crynyd     hair_color brown       \n# ℹ 246 more rows\n\n\n\nstarwars_select |&gt; \n  tidyr::pivot_longer(cols = c(hair_color, skin_color, eye_color), names_to = \"attribute\", values_to = \"values\", values_drop_na = TRUE) |&gt; \n  dplyr::arrange(name)\n\n# A tibble: 256 × 3\n   name             attribute  values      \n   &lt;chr&gt;            &lt;chr&gt;      &lt;chr&gt;       \n 1 Ackbar           hair_color none        \n 2 Ackbar           skin_color brown mottle\n 3 Ackbar           eye_color  orange      \n 4 Adi Gallia       hair_color none        \n 5 Adi Gallia       skin_color dark        \n 6 Adi Gallia       eye_color  blue        \n 7 Anakin Skywalker hair_color blond       \n 8 Anakin Skywalker skin_color fair        \n 9 Anakin Skywalker eye_color  blue        \n10 Arvel Crynyd     hair_color brown       \n# ℹ 246 more rows\n\n\n\nlifecycle::pkg_lifecycle_statuses(\"tidyr\")\n\n   package                      fun    lifecycle\n9    tidyr                complete_   deprecated\n10   tidyr                 drop_na_   deprecated\n11   tidyr                  expand_   deprecated\n12   tidyr                crossing_   deprecated\n13   tidyr                 nesting_   deprecated\n14   tidyr                 extract_   deprecated\n15   tidyr                    fill_   deprecated\n16   tidyr                  gather_   deprecated\n17   tidyr                    nest_   deprecated\n18   tidyr           separate_rows_   deprecated\n19   tidyr                separate_   deprecated\n20   tidyr                  spread_   deprecated\n21   tidyr                   unite_   deprecated\n22   tidyr                  unnest_   deprecated\n28   tidyr                  extract   superseded\n33   tidyr                   gather   superseded\n37   tidyr              nest_legacy   superseded\n38   tidyr            unnest_legacy   superseded\n51   tidyr                 separate   superseded\n52   tidyr    separate_longer_delim experimental\n53   tidyr separate_longer_position experimental\n54   tidyr            separate_rows   superseded\n55   tidyr     separate_wider_delim experimental\n56   tidyr  separate_wider_position experimental\n57   tidyr     separate_wider_regex experimental\n59   tidyr                   spread   superseded"
  },
  {
    "objectID": "posts/topic-packages/index.html#packages-that-help-with-installing-attaching-packages-yes-they-exist",
    "href": "posts/topic-packages/index.html#packages-that-help-with-installing-attaching-packages-yes-they-exist",
    "title": "R Packages - 3/7/25",
    "section": "",
    "text": "Some books, like the Epidemiologist R Handbook, recommend that you use the {pacman} package to install and load packages. This package has some extra utility that may be helpful. Other packages include {pak}, which have functions for installing packages from GitHub or other sources. There are other ways to install packages but beyond the scope of this document. See: The Comprehensive Guide to Installing R Packages from CRAN, Bioconductor, GitHub and Co."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "R useRs Group Blog",
    "section": "",
    "text": "R Packages - 3/7/25\n\n\n\n\n\n\ncode\n\n\n\nA deep dive into R packages\n\n\n\n\n\nMar 7, 2025\n\n\nDaniel B. Cooper (daniel.cooper@ky.gov)\n\n\n\n\n\n\nNo matching items"
  }
]